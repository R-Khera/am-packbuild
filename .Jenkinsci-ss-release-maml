pipeline {
    agent any
    environment {
       PACKAGE = 'archivematica-storage-service'
       //VERSION = '0.13.0'
       //RPMVERSION = '0.13.0'
       //RELEASE = '-1'
       //RPMRELEASE = '-1'
       REPOSITORY = '1.8.0'
       BRANCH = 'qa/0.x'
       GPG_ID = '0F4A4D31'
       //NUM_COMMITS_FROM_TAG = '0'
    }
    options {
       disableConcurrentBuilds()
       gitLabConnection('')
    }
    triggers {
        pollSCM('*/5 * * * *')
    }
    stages {
        stage('Get code'){
            steps {
                checkout changelog: true, poll: true, scm: [$class: 'GitSCM', branches: [[name: 'qa/0.x']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false], [$class: 'WipeWorkspace']], submoduleCfg: [], userRemoteConfigs: [[refspec: '+refs/tags/*:refs/remotes/origin/tags/*', url: 'https://github.com/mamedin/archivematica-storage-service.git']]]
//                git branch: 'qa/0.x', 
//                  url: 'https://github.com/mamedin/archivematica-storage-service',
//                    changelog: true,
//                    poll: true
                }
        }
        stage('Set properties'){
            steps {
                sh '''
                # Not pretty
                LAST_TAG=$( git describe --tags $(git rev-list --tags --max-count=1))
                NUM_COMMITS_FROM_TAG=$(git rev-list  $(git rev-list --tags --no-walk --max-count=1)..HEAD --count)
                CURRENT=$(git describe --tags --always --long)
                read -r GVERSION GRELEASE GCOMMITS GHEAD < <(echo $CURRENT | awk -F- '{print $1" "$2" "$3" "$4}')
                VERSION=$(echo $GVERSION | sed -e "s/v//g")
                # Official releases are tagged  vX.Y.Z instead of vX.Y.Z-RELEASE, so they values are shiftedÂ·
                if [ "x$GHEAD" = "x" ]
                  then
                    echo "This is an official tag"
                    # Avoid creating packages with -0
                    RELEASE=$(echo "-"$(($GRELEASE + 1)))
                    RPMVERSION=$VERSION
                    RPMRELEASE=$RELEASE
                else
                    RELEASE=$(echo "~"${GRELEASE}"+"${GCOMMITS}"."${GHEAD})
                    # RPM prereleases have the release tag in the version field:
                    RPMVERSION=$(echo $VERSION"-"${GRELEASE})
                    RPMRELEASE=$(echo "+"${GCOMMITS}"."${GHEAD})
                fi

                echo $NUM_COMMITS_FROM_TAG | tee .numCommits
                echo $VERSION | tee .version
                echo $RPMVERSION | tee .rpmversion
                echo $RELEASE | tee .release
                echo $RPMRELEASE | tee .rpmrelease

                # Debian versions can be compared with
                # if $(dpkg --compare-versions "0.13.0~rc.5" "lt" "0.13.1-1"); then echo true; fi
                # For centos, rpmdev-vercmp from package rpmdevtools can be used
                # Use same repository than archivematica, so 1.8.0 is set instead of "cat .version"
                '''
                
                script {
                    env.NUM_COMMITS_FROM_TAG = sh(script: "cat .numCommits", returnStdout: true).trim()
                    env.VERSION = sh(script: "cat .version", returnStdout: true).trim()
                    env.RPMVERSION = sh(script: "cat .rpmversion", returnStdout: true).trim()
                    env.RELEASE = sh(script: "cat .release", returnStdout: true).trim()
                    env.RPMRELEASE = sh(script: "cat .rpmrelease", returnStdout: true).trim()
                }
             }
          }
          stage('Build rpm packages'){
              when {
                  expression { env.NUM_COMMITS_FROM_TAG == '0' }
              }
              steps {
                  build job: 'am-packbuild/rpm-jenkinsci', parameters: [
                    string(name: 'PACKAGE', value: "${PACKAGE}"),
                    string(name: 'BRANCH', value: "${BRANCH}"),
                    string(name: 'GPG_ID', value: "${GPG_ID}"),
                    string(name: 'VERSION', value: "${RPMVERSION}"),
                    string(name: 'RELEASE', value: "${RPMRELEASE}"),
                    string(name: 'REPOSITORY', value: "${REPOSITORY}")]
              }
          }
          stage('Build bionic packages'){
              when {
                  expression { env.NUM_COMMITS_FROM_TAG == '0' }
              }
              steps {
                  build job: 'am-packbuild/bionic-jenkinsci', parameters: [
                    string(name: 'PACKAGE', value: "${PACKAGE}"),
                    string(name: 'BRANCH', value: "${BRANCH}"),
                    string(name: 'GPG_ID', value: "${GPG_ID}"),
                    string(name: 'VERSION', value: "${VERSION}"),
                    string(name: 'RELEASE', value: "${RELEASE}"),
                    string(name: 'REPOSITORY', value: "${REPOSITORY}")]
              }
          } 
          stage('Build xenial packages'){
              when {
                  expression { env.NUM_COMMITS_FROM_TAG == '0' }
              }
              steps {
                  build job: 'am-packbuild/xenial-jenkinsci', parameters: [
                    string(name: 'PACKAGE', value: "${PACKAGE}"),
                    string(name: 'BRANCH', value: "${BRANCH}"),
                    string(name: 'GPG_ID', value: "${GPG_ID}"),
                    string(name: 'VERSION', value: "${VERSION}"),
                    string(name: 'RELEASE', value: "${RELEASE}"),
                    string(name: 'REPOSITORY', value: "${REPOSITORY}")]
              }
          }
       }
   
}
